// Map Initialize
var handler = Gmaps.build('Google');
handler.buildMap({
  provider: {
    disableDefaultUI: false,
    zoom: 15
  }, internal: {
    id: 'map'
  }
}, function(){
  setGeolocation();
  setLegend();
  setSearchAddress();
});

// GLOBAL VARIABLES
var user = <%= raw @user.to_json %>;
var oldPosition = 0;
var oldSquare = 0;
var circle = handler.addCircle(
    { lat: -30.03518581
    , lng: -51.22660625
    , radius: oldSquare }
    ,{ strokeColor: '#FF0000'}
); 
// var sizeFilter = 'none';
// var ageFilter = 'none';
// var behaviourFilter = 'none';
// var apperanceFilter = 'none';
// var statusFilter = 'none';
// var actualFilter = 'none';


// Get Location
function setGeolocation(){
  // Senac coords
  p = { coords: { latitude: -30.03518581 ,longitude: -51.22660625 } };
  
  // if (user) {
  //   if(user.configuration.address){
  //     // Default address for user configuration
  //     p = { coords: { latitude: user.configuration.address.lat, longitude: user.configuration.address.lng } };
  //     displayOnMap(p);
  //   };
  // } else {
    if(navigator.geolocation) {
      // Geolocation
      navigator.geolocation.getCurrentPosition(displayOnMap,function (error){
        if (error.code == error.PERMISSION_DENIED){
          // User address
          if (user) {
            p = { coords: { latitude: user.address.lat ,longitude: user.address.lng } };
          };
          displayOnMap(p);
        };
      });
    };
  // };
};

// Show the user location and call the circle area
function displayOnMap(position){
  resetMap();
  
  marker = handler.addMarker({
    lat: position.coords.latitude,
    lng: position.coords.longitude    
  });
  
  handler.map.centerOn(marker);
  setCircle(position,getSquare());
};

// Create the circle area
function setCircle(position,square){
  
  circle = handler.addCircle(
      { lat: position.coords.latitude, lng: position.coords.longitude, radius: square },
      { strokeColor: '#FF0000' }
    );
  
  handler.bounds.extendWith(circle);
  
  // Add the data on the map based on the position
  setMarkers(position, square);
};

// Get Square from user or default
function getSquare(){
  
  if (oldSquare > 0){
    s = oldSquare;
  } else {
    // Check if the user has square configuration saved
    if(user)
      if (user.configuration.square)
        s = user.configuration.square*1000;
      else
        // Default Square value (1KM)
        s = 1000; 
    else
      s = 1000;
  }
    
  return s;
};

// Add the data on the map within the square bounds
function setMarkers(position, square){
  petsTemp = <%= raw @pets.to_json %>;
  address = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
  arrayPets = [];
  
  // Get all pets in the distance
  $.each(petsTemp, function(index, pet) {
    addressPet = new google.maps.LatLng(pet.lat,pet.lng);
    distance = google.maps.geometry.spherical.computeDistanceBetween(address,addressPet);
    
    if(distance <= square)
      arrayPets.push(pet);
  });
  
  pets = filterPets(arrayPets);
  
  markers = handler.addMarkers(pets);
  
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
  oldPosition = position;
  oldSquare = square;
};

// Filter the pets based on the tags and situation
function filterPets(petsTemp){
  filterPet = <%= raw @petsTemp.to_json %>;
  pets = [];
  // console.log(filterPet);
  
  // $.each(filterPet, function(index,pet){
  //   $.each(petsTemp, function(index2,petTemp){
  //     if(
  //       pet.name == petTemp.marker_title
  //       && pet.address.lat == petTemp.lat
  //       && pet.address.lng == petTemp.lng
  //     ){
  //       $.each(pet.tag,function(i,t){
  //         if (t.category=='size' && actualFilter=='rdSize'){
  //           if(t.name==sizeFilter || 'none'==sizeFilter)
  //             pets.push(petTemp);
  //         };
  //         if (t.category=='age' && actualFilter=='rdAge'){
  //           if(t.name==ageFilter || 'none'==ageFilter)
  //             pets.push(petTemp);
  //         };
  //         if (t.category=='behaviour' && actualFilter=='rdBehaviour'){
  //           if(t.name==behaviourFilter || 'none'==behaviourFilter)
  //             pets.push(petTemp);
  //         };
  //         if (t.category=='apperance' && actualFilter=='rdApperance'){
  //           if(t.name==apperanceFilter || 'none'==apperanceFilter)
  //             pets.push(petTemp);
  //         };
  //       });
  //       if ((pet.status.name==statusFilter || 'none'==statusFilter) && (actualFilter=='rdStatus')){
  //         pets.push(petTemp);
  //       };
  //     };
  //   });
  // });
  
  // if (pets.length == 0 && actualFilter=='none')
  //   pets = petsTemp;
  
  // actualFilter = 'none';
  
  // pets = filterPet.filter();
  
  // console.log(pets);
  return petsTemp;
};


// Get the new square size
function setSquare(square){
  oldSquare = (square*1000);
  
  displayOnMap(oldPosition);
};

// Get new filter market
function setFilter(){
  
  // if(rd.id == 'rdSize')
  //   sizeFilter = rd.value;
  // if(rd.id == 'rdAge')
  //   ageFilter = rd.value;
  // if(rd.id == 'rdBehaviour')
  //   behaviourFilter = rd.value;
  // if(rd.id == 'rdApperance')
  //   apperanceFilter = rd.value;
    
  // if(rd.id == 'rdStatus')
  //   statusFilter = rd.value;
    
  // actualFilter = rd.id;
  
  displayOnMap(oldPosition);
};

// Clean old data and reset the bound
function resetMap(){
  handler.clusterer.serviceObject.clearMarkers();
  circle.setMap(null);
  handler.resetBounds();
};

// Redirect page
function redirectPet(id){
  url = "<%= pets_path %>/"+id;
  window.location.href = url;
};



// LEGEND

function setLegend(){
  icons = [];
  
  statuses = <%= raw @statuses.to_json %>;
  animals =  <%= raw @animals.to_json %>;
  
  for(i=0; i<statuses.length; i++){
    icon = {
      name: statuses[i].name,
      iconDog: '/images/icons/'+ statuses[i].icon +'/'+ animals[0].icon,
      iconCat: '/images/icons/'+ statuses[i].icon +'/'+ animals[1].icon
    };
    
    icons.push(icon);
  };
  
  legend = document.getElementById('mapsLegend');
  for (var key in icons) {
    name = icons[key].name;
    iconD = icons[key].iconDog;
    iconC = icons[key].iconCat;
    div = document.createElement('div');
    div.innerHTML = '<img src="' + iconD + '"><img src="' + iconC + '"> ' + name;
    legend.appendChild(div);
  }
  
  handler.map.serviceObject.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend);
}


// SEARCH ADDRESS

function setSearchAddress(){
  var position;
  var coords;
  
  // Setting up the search box
  var map = handler.getMap();
  var input = document.getElementById('mapsSearch');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });
  
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();
    var bounds = new google.maps.LatLngBounds();
  
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
  
      if(place.geometry.viewport)
        bounds.union(place.geometry.viewport);
      else
        bounds.extend(place.geometry.location);
      
      // Define the position searched
      position = {
        coords: {
          latitude: parseFloat(place.geometry.location.lat()),
          longitude: parseFloat(place.geometry.location.lng())
        }
      };
      
      oldPosition = position;
      
      displayOnMap(position);
      map.fitBounds(bounds);
    });
  });
};
