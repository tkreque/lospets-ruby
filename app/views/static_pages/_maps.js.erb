// Map Initialize
var handler = Gmaps.build('Google');
handler.buildMap({
  provider: {
    disableDefaultUI: false,
    zoom: 15
  }, internal: {
    id: 'map'
  }
}, function(){
  setGeolocation();
  setLegend();
  setSearchAddress();
});

// GLOBAL VARIABLES
var user = <%= raw current_user.to_json %>;
var oldPosition = 0;
var oldSquare = 0;
var circle = handler.addCircle(
    { lat: -30.03518581
    , lng: -51.22660625
    , radius: oldSquare }
    ,{ strokeColor: '#FF0000'}
); 
var situations = []; //Status (name had to be changed)
var tagsSize = [];
var tagsAge = [];
var tagsBehaviour = [];
var tagsApperance = [];

// Get Location
function quickGeolocation(){
  if(navigator.geolocation) {
      // Geolocation
      navigator.geolocation.getCurrentPosition(displayOnMap,function (error){
        if (error.code == error.PERMISSION_DENIED){
          alert("Seu navegador está com esta opção desabilitada, por favor desbloqueie e tente novamente!");
        } else {
          alert("Seu navegador não suporta esta opção!");
        };
    });
  };
};

function setGeolocation(){
  // Senac coords
  p = { coords: { latitude: -30.030100 ,longitude: -51.224841 } };
  
  if (user) {
    if (user.configuration) {
      if(user.configuration.address){
        // Default address for user configuration
        p = { coords: 
          { 
            latitude: user.configuration.address.coordinates[1], 
            longitude: user.configuration.address.coordinates[0] 
          } 
        };
        displayOnMap(p);
      };
    };
  } else {
    if(navigator.geolocation) {
      // Geolocation
      navigator.geolocation.getCurrentPosition(displayOnMap,function (error){
        if (error.code == error.PERMISSION_DENIED){
          // User address
          if (user.address) {
            p = { coords: { latitude: user.address.coordinates[0] ,longitude: user.address.coordinates[1] } };
          };
          displayOnMap(p);
        };
      });
    };
  };
};

// Show the user location and call the circle area
function displayOnMap(position){
  resetMap();
  
  marker = handler.addMarker({
    lat: position.coords.latitude,
    lng: position.coords.longitude    
  });
  
  handler.map.centerOn(marker);
  setCircle(position,getSquare());
};

// Create the circle area
function setCircle(position,square){
  
  circle = handler.addCircle(
      { lat: position.coords.latitude, lng: position.coords.longitude, radius: square },
      { strokeColor: '#FF0000' }
    );
  
  handler.bounds.extendWith(circle);
  
  // Add the data on the map based on the position
  setMarkers(position, square);
};

// Get Square from user or default
function getSquare(){
  
  if (oldSquare > 0){
    s = oldSquare;
  } else {
    // Check if the user has square configuration saved
    if (user) {
      if(user.configuration)
        if (user.configuration.square) {
          s = user.configuration.square*1000;
        } else {
          s = 1000; 
        };
    } else {
      s = 1000;
    };
  };
  
  return s;
};

// Add the data on the map within the square bounds
function setMarkers(position, square){
  petsTemp = <%= raw @pets.to_json %>;
  address = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
  arrayPets = [];
  
  // Get all pets in the distance
  $.each(petsTemp, function(index, pet) {
    
    addressPet = new google.maps.LatLng(pet.lat,pet.lng);
    // addressPet = new google.maps.LatLng(pet.lat,pet.coords);
    distance = google.maps.geometry.spherical.computeDistanceBetween(address,addressPet);
    
    if(distance <= square)
      arrayPets.push(pet);
  });
  
  pets = filterPets(arrayPets);
  
  markers = handler.addMarkers(pets);
  
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
  oldPosition = position;
  oldSquare = square;
  
};

// Filter the pets based on the tags and situation
function filterPets(petsTemp){
  filterPet = <%= raw @petsFilter.to_json %>;
  petsArray = [];
  petsArray2 = [];
  petsArrayFiltro = [];
  
  petsArraySize = [];
  petsArrayAge = [];
  petsArrayBehaviour = [];
  petsArrayApperance = [];
  
  petsFinal = [];
  
   // Filter by Status
  $.each(situations, function(index,stat){
    pets = filterPet.filter(pet => pet.status.name == stat);
    
    $.each(pets, function(index2,pet){
      petsArray.push(pet);  
    });
  });
  
  petsArray = _.uniq(petsArray);
  
  if (petsArray.length == 0)
    petsArray = filterPet;
  
  // Filter by TAG
  
  petsArraySize = filterByTag(tagsSize,petsArray);
  petsArrayAge = filterByTag(tagsAge,petsArray);
  petsArrayBehaviour = filterByTag(tagsBehaviour,petsArray);
  petsArrayApperance = filterByTag(tagsApperance,petsArray);
  
  $.each(petsArraySize, function(index, pet){
    petsArrayFiltro.push(pet);
  });
  $.each(petsArrayAge, function(index, pet){
    petsArrayFiltro.push(pet);
  });
  $.each(petsArrayBehaviour, function(index, pet){
    petsArrayFiltro.push(pet);
  });
  $.each(petsArrayApperance, function(index, pet){
    petsArrayFiltro.push(pet);
  });
  
  petsArrayFiltro = _.uniq(petsArrayFiltro);
  
  petsArray2 = petsArray.filter( ( el ) => !petsArrayFiltro.includes( el ) );
  
  if (petsArray2.length == 0 && petsArrayFiltro.length == 0 )
    petsArray2 = petsArray;
  
  // Get the final array and look for the markers
  $.each(petsArray2, function(index,pet){
    $.each(petsTemp, function(index2,petTemp){
      if (pet.name == petTemp.marker_title && pet.address.coordinates[1] == petTemp.lat && pet.address.coordinates[0] == petTemp.lng){
        petsFinal.push(petTemp);
      };
    });
  });
  
  if (petsFinal.length == 0 && petsArrayFiltro.length == 0)
    petsFinal = petsTemp;
  
  return petsFinal;
};

function filterByTag(tags,petsArray){
  array = [];
  pets = [];
  
  $.each(tags, function(index,tag){
    
    if (petsArray.filter(pet => pet.tag.map(function(t){return t.name}).indexOf(tag) > -1).length > 0){
      pets = petsArray.filter(pet => pet.tag.map(function(t){
        return t.name
      }).indexOf(tag) == -1);  
    } else {
      if (tags.length == 1){
        pets = petsArray.filter(pet => pet.tag.map(function(t){
            return t.name
          }).indexOf(tag) == -1);  
      };
    };
    
    $.each(pets, function(index2,pet){
      array.push(pet);  
    });
  });
  
  array = _.uniq(array);
  
  if (array.length == petsArray.length && tags.length > 1)
    array = [];
  
  return array;
};

// Get the new square size
function setSquare(square){
  oldSquare = (square*1000);
  
  displayOnMap(oldPosition);
};

// Get new filter market
function setFilter(filter,type){

  if (type == 'cbSize'){
    index = tagsSize.indexOf(filter);
    if (index > -1)
      tagsSize.splice(index,1);
    else
      tagsSize.push(filter);
  };
  
  if (type == 'cbAge'){
    index = tagsAge.indexOf(filter);
    if (index > -1)
      tagsAge.splice(index,1);
    else
      tagsAge.push(filter);
  };
  
  if (type == 'cbBehaviour'){
    index = tagsBehaviour.indexOf(filter);
    if (index > -1)
      tagsBehaviour.splice(index,1);
    else
      tagsBehaviour.push(filter);
  };
  
  if (type == 'cbApperance'){
    index = tagsApperance.indexOf(filter);
    if (index > -1)
      tagsApperance.splice(index,1);
    else
      tagsApperance.push(filter);
  };
  
  if (type == 'cbStatus'){
    index = situations.indexOf(filter);
    if (index > -1)
      situations.splice(index,1);
    else
      situations.push(filter);
  };
  
  displayOnMap(oldPosition);
};

// Clean old data and reset the bound
function resetMap(){
  handler.clusterer.serviceObject.clearMarkers();
  circle.setMap(null);
  handler.resetBounds();
};

// Redirect page
function redirectPet(id){
  url = "<%= pets_path %>/"+id;
  window.location.href = url;
};



// LEGEND

function setLegend(){
  icons = [];
  
  statuses = <%= raw @statuses.to_json %>;
  animals =  <%= raw @animals.to_json %>;
  
  for(i=0; i<statuses.length; i++){
    icon = {
      name: statuses[i].name,
      iconDog: '/images/icons/'+ statuses[i].icon +'/'+ animals[0].icon,
      iconCat: '/images/icons/'+ statuses[i].icon +'/'+ animals[1].icon
    };
    
    icons.push(icon);
  };
  
  legend = document.getElementById('mapsLegend');
  for (var key in icons) {
    name = icons[key].name;
    iconD = icons[key].iconDog;
    iconC = icons[key].iconCat;
    div = document.createElement('div');
    div.innerHTML = '<img src="' + iconD + '"><img src="' + iconC + '"> ' + name;
    legend.appendChild(div);
  }
  
  handler.map.serviceObject.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend);
}


// SEARCH ADDRESS

function setSearchAddress(){
  var position;
  var coords;
  
  // Setting up the search box
  var map = handler.getMap();
  var input = document.getElementById('mapsSearch');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });
  
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();
    var bounds = new google.maps.LatLngBounds();
  
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
  
      if(place.geometry.viewport)
        bounds.union(place.geometry.viewport);
      else
        bounds.extend(place.geometry.location);
      
      // Define the position searched
      position = {
        coords: {
          latitude: parseFloat(place.geometry.location.lat()),
          longitude: parseFloat(place.geometry.location.lng())
        }
      };
      
      oldPosition = position;
      
      displayOnMap(position);
      map.fitBounds(bounds);
    });
  });
};
