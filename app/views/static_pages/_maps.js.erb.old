var handler = Gmaps.build('Google');
handler.buildMap({
  provider: {
    disableDefaultUI: false,
    zoom: 15
  }, internal: {
    id: 'map'
  }
}, function(){
  setGeolocation();
  setLegend();
  searchAddress();
});

// INITIALIZE GLOBAL VARIABLES
var square = 1000;                        // Initial circle square for calculations
var circle = handler.addCircle(
    { lat: -30.03518581
    , lng: -51.22660625
    , radius: square }
    ,{ strokeColor: '#FF0000'}
);                                        // Initial circle proprieties with default values
var oldMarker = {
      latitude: -30.03518581
    , longitude: -51.22660625
};                                        // The last marker used with default values
var arrayFilters = [];                    // Array to store the filters
var option = 0;                           // Store the last option choosed (1 - Circle || 2 - all data)
var pets = <%=raw @pets.to_json %>;       // All pets from the database
// var situations = <%=raw @situations.to_json %>;
// var animals = <%=raw @animals.to_json %>;

// FUNCTION TO CLEAN THE DATA
function resetMap(){
  handler.clusterer.serviceObject.clearMarkers();
  circle.setMap(null);
  handler.resetBounds();
};

// FUNCTION TO ENABLE GEOLOCATION
function setGeolocation(){
  if(navigator.geolocation)
    navigator.geolocation.getCurrentPosition(displayOnMap, allData);
};

// FUNCTION TO SHOW ALL DATA
function allData(){
  resetMap();
  option = 2;
  
  var markers = handler.addMarkers(pets); 
  
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
};

// FUNCTION TO SET THE CIRCLE
function displayOnMap(position){
  resetMap();
  
  var marker = handler.addMarker({
    lat: position.coords.latitude,
    lng: position.coords.longitude    
  });
  
  oldMarker = position;
  
  handler.map.centerOn(marker);
  setCircle(position, square);
};

// FUNCTION TO SET THE CIRCLE
function setCircle(position, square){
  option = 1;
  circle = handler.addCircle(
    { lat: position.coords.latitude, lng: position.coords.longitude, radius: square },
    { strokeColor: '#FF0000'}
  );
  handler.bounds.extendWith(circle);
  
  setMarkers(position, square);
}

// FUNCTION TO ADD DATA IN THE CIRCLE
function setMarkers(position, square){
  var addressLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  var pets = <%=raw @hash.to_json %>;
  var arrayPets = [];
  var arrayPetsTemp = [];

  // console.log(filters);
  $.each(pets, function(index, pet) {
    var addressPet = new google.maps.LatLng(pet.lat,pet.lng);
    var distance = google.maps.geometry.spherical.computeDistanceBetween(addressLocation, addressPet);
    
    if (distance <= square)
      arrayPets.push(pet);
  });
  // console.log(arrayPets);
  
  if (arrayFilters.length == 0)
    arrayPetsTemp = arrayPets;
  else{
    $.each(arrayPets, function(index, pet){
      for(i=0; i<arrayFilters.length; i++){
        // console.log(arrayFilters);
        // console.log(pet.infowindow);
        if(pet.infowindow.indexOf(arrayFilters[i]) != -1)
          arrayPetsTemp.push(pet);  
      }
    });
  }
  
  // console.log(arrayPetsTemp);
  var markers = handler.addMarkers(arrayPetsTemp); 
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
};

// FUNCTION TO ADJUST THE CIRCLE
function adjustSquare(newSquare){
  square = (newSquare*1000);
  displayOnMap(oldMarker);
};

// FUNCTION TO ADJUST FILTERS
function setFilters(filter){
  var exist = -1;
  
  for(i=0; i<arrayFilters.length; i++){
    if(filter == arrayFilters[i])
      exist = i;
  }
  
  if(exist > -1)
    arrayFilters.splice(exist, 1);
  else
    arrayFilters.push(filter);
    
    
  displayOnMap(oldMarker);
};


// FUNCTION TO SEARCH THE ADDRESS AND SET THE NEW ONE
function searchAddress(){
  var position;
  var coords;
  
  // Setting up the search box
  var map = handler.getMap();
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });
  
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();
    var bounds = new google.maps.LatLngBounds();
  
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
  
      if(place.geometry.viewport)
        bounds.union(place.geometry.viewport);
      else
        bounds.extend(place.geometry.location);
      
      // Define the position searched
      position = {
        coords: {
          latitude: parseFloat(place.geometry.location.lat()),
          longitude: parseFloat(place.geometry.location.lng())
        }
      };
      
      oldMarker = position;
      
      displayOnMap(position);
      map.fitBounds(bounds);
    });
  });
};


// FUNCTION TO THE BUTTON TO REDIRECT TO PET PAGE
function redirectPet(id){
  var url = "<%= pets_path %>/"+id;
  window.location.href = url;
};

// FUNCTION TO ADD THE LEGEND
function setLegend(){
  var icons = [];
  
  for(i=0; i<situations.length; i++){
    var icon = {
      name: situations[i].situation,
      iconDog: '/images/icons/'+ situations[i].iconColor +'/'+ animals[0].iconDraw +'.png',
      iconCat: '/images/icons/'+ situations[i].iconColor +'/'+ animals[1].iconDraw +'.png'
    }
    
    icons.push(icon);
  }
  
  var legend = document.getElementById('legend');
  for (var key in icons) {
    var name = icons[key].name;
    var iconD = icons[key].iconDog;
    var iconC = icons[key].iconCat;
    var div = document.createElement('div');
    div.innerHTML = '<img src="' + iconD + '"><img src="' + iconC + '"> ' + name;
    legend.appendChild(div);
  }
  
  console.log(handler.map.serviceObject);
  handler.map.serviceObject.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend);
}
